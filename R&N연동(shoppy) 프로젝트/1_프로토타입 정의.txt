1. 프로젝트 준비사항
(1) 프로젝트 구조 설계
폴더 구조: 적절한 폴더 계층을 설계해 유지보수성과 가독성을 높임

src/
├── assets/       # 이미지, 폰트, 스타일 등 정적 자원
├── components/   # 재사용 가능한 UI 컴포넌트
├── pages/        # 페이지 단위 컴포넌트
├── hooks/        # 커스텀 훅
├── contexts/     # React Context API 관련 파일
├── services/     # API 호출 및 비즈니스 로직
├── utils/        # 유틸리티 함수
├── styles/       # 전역 스타일 및 테마
└── App.jsx       # 앱 엔트리 포인트



(2) 기술 스택 선택
React, Redux/Zustand(Recoil), Styled-Components, Axios 등 프로젝트 성격에 맞는 기술 선정

(3) 패키지 설치합니다
기본적으로 필요한 패키지를 설치합니다.


(4) 코딩 컨벤션 정리
ESLint와 Prettier로 코딩 스타일을 통일

(5) 디자인 시스템 정리
UI 프로토타입 디자인 정의
컴포넌트의 색상, 크기, 폰트 스타일 등 일관된 디자인 정의

2. 파일명 프로토타입 정의

(1) 파일명 작성 규칙
케밥 케이스 (kebab-case): 파일명이 단어로 이루어진 경우 소문자와 하이픈(-)을 사용. (예: header-menu.jsx)
파스칼 케이스 (PascalCase): React 컴포넌트 파일은 대문자로 시작하고 단어마다 대문자로 구분. (예: UserProfile.jsx)
카멜 케이스(CamelCase) : React 함수 또는 JavaScript 함수명 정의시 첫글자는 소문자로 시작하고 단어마다 대문자로 시작.(예: userProfile.js)
소문자 케이스: 유틸리티 함수, 설정 파일 등은 소문자로 작성. (예: format-date.js)


(2) 파일명 예시
- 컴포넌트 파일
    프레젠테이션 컴포넌트: Button.jsx, Modal.jsx
    컨테이너 컴포넌트: DashboardContainer.jsx
- 페이지 파일
    라우트 페이지: HomePage.jsx, AboutPage.jsx
- 스타일 파일
    CSS Module: button.module.css, header.module.scss
    전역 스타일: global-styles.js, theme.js
- 유틸리티 및 API
    유틸리티: dateUtils.js, stringHelpers.js
    API 호출: userApi.js, authService.js

(3) 디렉토리 내 파일명 중복 방지
같은 이름을 가진 컴포넌트가 다른 디렉토리에 위치해야 할 경우, 디렉토리 이름으로 역할을 명확히 구분함


components/
├── Header/
│   └── Header.jsx
├── Footer/
│   └── Footer.jsx

3. 협업 팁
README 파일 작성: 프로젝트 시작 시 프로젝트 구조, 기술 스택, 파일명 규칙, 작업 방식 등을 정리하여 공유
Git 브랜치 전략: Git Flow나 GitHub Flow 같은 브랜치 전략을 활용해 효율적으로 협업 진행
